.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NAMA 1"
.TH NAMA 1 "2008-09-14" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\fBAudio::Multitrack\fR \- Perl extensions for multitrack audio processing
.PP
\&\fBnama\fR \- Multitrack recording/mixing application
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBnama\fR \fIoptions\fR \fIproject_name\fR
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-d\fR \fIproject_root_dir\fR" 12
.IX Item "-d project_root_dir"
Use \fIproject_root_dir\fR as nama top-level project directory (default \f(CW$HOME\fR/nama)
.IP "\fB\-g\fR" 12
.IX Item "-g"
Graphical user interface
.IP "\fB\-t\fR" 12
.IX Item "-t"
Text user interface (default)
.IP "\fB\-f\fR \fIconfig_file\fR" 12
.IX Item "-f config_file"
Use \fIconfig_file\fR instead of default .namarc
.IP "\fB\-c\fR" 12
.IX Item "-c"
Create the project named after all options
.IP "\fB\-a\fR" 12
.IX Item "-a"
Save and reload \s-1ALSA\s0 state using alsactl
.IP "\fB\-m\fR" 12
.IX Item "-m"
Suppress loading of saved state
.IP "\fB\-e\fR" 12
.IX Item "-e"
Don't load static effects data
.IP "\fB\-s\fR" 12
.IX Item "-s"
Don't load static effects data cache
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBAudio::Multitrack\fR provides class libraries for managing
tracks and buses.
.PP
\&\fBNama\fR is a recorder/mixer application with text and
graphical interfaces. It is configured as a single mixer bus
with per-track volume/pan/effects, a master fader, and a
mixdown track.
.PP
There are two types of commands.
.PP
\&\fBStatic commands\fR control the chain setup that will be
used for audio processing. They are generally used
while the audio processing engine is \fInot\fR running.
.PP
For example, the \s-1REC/MON/OFF\s0 status for a track and its
associated group controls whether that track will be
included in the next Ecasound chain setup, and whether the
audio stream will be recorded or played back.
.PP
After issuing static commands, use the the \fIarm\fR command
(or \s-1GUI\s0 button) to generate a chain setup file and connect
it to the audio processing engine.  This is usually the last
operation before pressing the start button.
.PP
\&\fBDynamic commands\fR operate in realtime, affecting
volume, pan, and playback head position while the engine is
running. Effects parameters you can adjust at any time.
Playback position can only be adjusted after the chain
setup is connected.
.PP
On the first run the program creates \f(CW$HOME\fR/.namarc, the
configuration file and project directory \f(CW$HOME\fR/nama.  \s-1WAV\s0
files and parameter settings for each project are stored in
\&.wav directories under \f(CW$HOME\fR/nama.  You probably want to edit the
default .namarc to suit your audio configuration.
.PP
Project state can be stored/retrieved. These data are stored
in the State.yml file in the project directory. The storage
format is user-friendly \s-1YAML\s0.
.PP
To be certain your chain setup loads correctly, you may need
to regenerate the setup using the Arm button in the \s-1GUI\s0 or
the \fIarm\fR command under the text interface.
.SH "LADSPA"
.IX Header "LADSPA"
Audio::Multitrack will automatically incorporate locally
available \s-1LADSPA\s0 plugins provided you have the 'analyseplugin'
program (part of \s-1LADSPA\s0 client libraries) installed.
.SH "Tk GRAPHICAL UI"
.IX Header "Tk GRAPHICAL UI"
Invoked using the \-g switch on the nama command line, 
the Tk interface provides two panels for record/mix
and effects. Linear/log sliders are automatically used for most
plugins. For other plugins, text-entry widgets are used to
enter parameters.
.PP
The \s-1GUI\s0 time display color indicates whether the upcoming
operation will include recording (red), mixing only (yellow) or
playback only (green).
.PP
Even in \s-1GUI\s0 mode the text command prompt appears in the
terminal window, and text commands may be issued at any
time.
.SH "TEXT UI"
.IX Header "TEXT UI"
The command line interpreter starts by default
or by using the \fB\-t\fR option when invoking nama.
.PP
\&\fBEnter command:\fR
.PP
Nama and Ecasound-IAM commands can be entered
directly.
.PP
Perl code should be preceded by \*(L"eval \*(R".
.PP
Shell code should be preceded by \*(L"!\*(R".
.PP
Commands on the same line should be separated by semicolons
(';').
.PP
Note that if an 'eval' or '!' appears at the beginning of a
command, the entire line will be give to the corresponding
interpreter.
.PP
In other situations, the lines are split on semicolons and
each part is executed appropriately as Nama, Ecasound, perl
code or shell commands.
.PP
You can access history using up\-arrow/down\-arrow
(Ctrl\-P/Ctrl\-N on Mac).
.PP
Type \fBhelp\fR for a command summary, \fBhelp command\fR for
help with \fIcommand\fR.
.SH "TRACKS"
.IX Header "TRACKS"
Multiple \s-1WAV\s0 files can be recorded for each track. These are
identified by version number. Identical version numbers indicate \s-1WAV\s0 files
recorded at the same time. Version number increments
automatically so that the order of version numbers
follows the time sequence of the recordings.
.PP
Each track, including Master and Mixdown, has its own
\&\s-1REC/MON/OFF\s0 setting and displays its own \s-1REC/MON/OFF\s0
status. The Master track has only \s-1MON/OFF\s0 status. Setting \s-1REC\s0
status for the Mixdown track is the same as issuing
the 'mixdown' command.
.PP
Master and Mixdown tracks can behave differently from 
user-created tracks because they belong to different
groups.
.PP
All user-created tracks belong to the Tracker group.
The Tracker group has \s-1REC/MON/OFF\s0 and version
settings that apply to all user tracks.
.PP
Tracker group \s-1MON\s0 setting (text command 'group_monitor')
forces all user tracks with a \s-1REC\s0 setting to \s-1MON\s0 status.
Tracker group \s-1MON\s0 mode triggers automatically after a
successful recording.
.PP
Tracker group \s-1OFF\s0 setting (text 'group_off') excludes all user
tracks from the chain setup. Can be useful when playing back files
recorded through the Mixdown function. The
text 'mixplay' command sets the Tracker group to \s-1OFF\s0.
.PP
A track with no recorded \s-1WAV\s0 files that is set to \s-1MON\s0 will
show \s-1OFF\s0 status.
.SH "SAMPLE SESSION"
.IX Header "SAMPLE SESSION"
Here is a typical sequence of commands to record tracks
with Nama:
.PP
create marys_little_helper       # new project
add guitar; r1                   # record track 'guitar' from input 1
add piano; r2                    # record track 'piano' from input 2
add drums; r3                    # record track 'drums' from input 3
arm
start
(perform song)
stop
show                             # new versions of guitar, piano and drums
                                 # appear
arm; start                       # review recording
.PP
group_record                     # rec-enable group
guitar mon; piano mon; drums mon # set three tracks to monitor mode
add vocals; r2                   # record track 'vocals' from input 2
arm
start
(perform vocals)
stop
.PP
arm; start                       # review recording
.PP
(adjust effects)
.PP
mixdown; show                    # set mixdown mode, show results
arm; start                       # record mixdown track
stop
mixplay                          # mixdown playback mode
arm; start                       # review completed mix
.SH "DIRECTORY STRUCTURE"
.IX Header "DIRECTORY STRUCTURE"
\&\f(CW$project_root\fR is the directory where your project files,
including \s-1WAV\s0 files you record, will go. \f(CW$project_root\fR
is defined in the first non-comment line of 
your .namarc file.
.PP
File or directory                     Explanation
\&\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&\f(CW$HOME\fR/.namarc                         Nama configuration file
\&\f(CW$project_root\fR/project_name/.wav       \s-1WAV\s0 files we record will be stored here
\&\f(CW$project_root\fR/project_name/Setup.ecs  Ecasound chainsetup, dynamically generated
\&\f(CW$project_root\fR/project_name/State.yml  Default save file for project parameters
\&\f(CW$project_root\fR/project_name/.namarc    Project-specific configuration
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No \s-1GUI\s0 remove-track command is provided.
.PP
Default \s-1GUI\s0 volume sliders are not log scaled.
.PP
The post-recording cleanup routine deletes
newly recorded soundfiles under 44100 bytes in size.
.PP
Parameter controllers support is not complete
.SH "EXPORT"
.IX Header "EXPORT"
None by default.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This module requires that you have installed these Perl modules:
.PP
.Vb 10
\&        Carp
\&        Data::YAML
\&        IO::All
\&        Cwd
\&        Storable 
\&        Data::Dumper
\&        Getopt::Std
\&        Tk
\&        Audio::Ecasound
\&        Parse::RecDescent
\&        YAML::Tiny
\&        Data::YAML
\&        File::Find::Rule
\&        File::Spec::Link
.Ve
.PP
The Ecasound audio processing libraries must also be
installed.  Ecasound may be obtained from
http://ecasound.seul.org/ecasound/ or as precompiled binary
packages for your Un*x distribution.
.PP
\&\s-1LADSPA\s0 libraries and plugins are strongly recommended.  In
that case, the \s-1LADSPA\s0 utility program 'analyseplugin' must
also be installed in a directory in your execution \s-1PATH\s0.  See
http://ladspa.org .
.PP
\&'file', a \s-1BSD\s0 utility program, is also needed.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
\&\s-1CPAN\s0, for the distribution.
.PP
Pull source code using this command:
.PP
.Vb 1
\&    git clone git://github.com/bolangi/nama.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Joel Roth, <joelz@pobox.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007 by Joel Roth
.PP
This library is licensed under \s-1GPL\s0 version 2.
See the file \s-1COPYING\s0 (included in the
distribution) for terms and conditions.
