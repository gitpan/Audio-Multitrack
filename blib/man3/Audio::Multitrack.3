.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Audio::Multitrack 3"
.TH Audio::Multitrack 3 "2008-09-14" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
package Audio::Multitrack::Text::OuterShell;
use base qw(Term::Shell); 
#\fIcreate_help_subs()\fR;
sub catch_run { # 
  my ($o, \f(CW$cmd\fR, \f(CW@args\fR) = \f(CW@_\fR;
  my \f(CW$original_command_line\fR = join \*(L" \*(R", \f(CW$cmd\fR, \f(CW@args\fR;
  #print \*(L"foudn \f(CW$0\fR \f(CW$original_command_line\fR\en\*(R";
  Audio::Multitrack::Text::command_process( \f(CW$original_command_line\fR );
}
sub catch_help {
  my ($o, \f(CW$cmd\fR, \f(CW@args\fR) = \f(CW@_\fR;
  \f(CW$debug\fR and print \*(L"cmd: \f(CW$cmd\fR\en\*(R";
  #my \f(CW$main_name\fR = 
  #
  print grep{ \f(CW$_\fR eq \f(CW$cmd\fR } join \*(L" \*(R", 
  my \f(CW$main_name\fR;
  \s-1CMD:\s0 for my \f(CW$k\fR ( keys \f(CW%commands\fR ){
      for my \f(CW$alias\fR ( \f(CW$k\fR, split \*(L" \*(R",$commands{$k}{short} ){
        if ($cmd eq \f(CW$alias\fR){
            \f(CW$main_name\fR = \f(CW$k\fR;
            last \s-1CMD\s0;
        }
    }
  }
  \f(CW$debug\fR and print \*(L"main_name: \f(CW$main_name\fR\en\*(R";
.PP
.Vb 5
\&    my $txt = $o\->help($main_name, @_);
\&    if ($o\->{command}{help}{found}) {
\&        $o\->page("$txt\en")
\&    }
\&}
.Ve
.PP
#my \f(CW$print\fR \*(L"catched help \f(CW@_\fR\*(R"}
sub prompt_str { 'Enter command: ' }
sub run_help {
    my \f(CW$o\fR = shift;
    my \f(CW$cmd\fR = shift;
    if ($cmd) {
    my \f(CW$txt\fR = \f(CW$o\fR\->help($cmd, \f(CW@_\fR);
    if ($o\->{command}{help}{found}) {
        \f(CW$o\fR\->page(\*(L"$txt\en\*(R")
    }
    else {
        my \f(CW@c\fR = sort \f(CW$o\fR\->possible_actions($cmd, 'help');
        if (@c and \f(CW$o\fR\->{\s-1API\s0}{match_uniq}) {
        local $\*(L" = \*(R"\en\et\*(L";
        print <<\s-1END\s0;
Ambiguous help topic '$cmd': possible help topics:
    \f(CW@c\fR
\&\s-1END\s0
        }
        else {
        print <<\s-1END\s0;
Unknown help topic '$cmd'; type 'help' for a list of help topics.
\&\s-1END\s0
        }
    }
    }
    else {
    print \*(R"Type 'help command' for more detailed help on a command.\en";
my \f(CW$help_screen\fR = <<\s-1HELP\s0;
Help Screen Goes here
\&\s-1HELP\s0
    \f(CW$o\fR\->page($help_screen);
    }
}
.PP
sub create_help_subs {
    \f(CW$debug2\fR and print \*(L"create_help_subs\en\*(R";
    \f(CW%commands\fR = %{ Audio::Multitrack::yaml_in( \f(CW$Audio::Multitrack::commands_yml\fR) };
.PP
.Vb 1
\&    $debug and print Audio::Multitrack::yaml_out \e%commands;
\&    
\&    map{ print $_, $/} grep{ $_ !~ /mark/ and $_ !~ /effect/ } keys %commands;
\&    
\&    map{ 
\&            my $run_code = qq!sub run_$_ { splice \e@_,1,0,  q($_); catch_run( \e@_) }; !;
\&            $debug and print "evalcode: $run_code\en";
\&            eval $run_code;
\&            $debug and $@ and print "create_sub eval error: $@\en";
\&            my $help_code = qq!sub help_$_ { q($commands{$_}{what}) };!;
\&            $debug and print "evalcode: $help_code\en";
\&            eval $help_code;
\&            $debug and $@ and print "create_sub eval error: $@\en";
\&            my $smry_text = 
\&            $commands{$_}{smry} ? $commands{$_}{smry} : $commands{$_}{what};
\&            $smry_text .= qq! ($commands{$_}{short}) ! 
\&                    if $commands{$_}{short};
\&
\&            my $smry_code = qq!sub smry_$_ { q( $smry_text ) }; !; 
\&            $debug and print "evalcode: $smry_code\en";
\&            eval $smry_code;
\&            $debug and $@ and print "create_sub eval error: $@\en";
\&
\&            my $alias_code = qq!sub alias_$_ { qw($commands{$_}{short}) }; !;
\&            $debug and print "evalcode: $alias_code\en";
\&            eval $alias_code;# noisy in docs
\&            $debug and $@ and print "create_sub eval error: $@\en";
\&
\&        }
\&
\&    grep{ $_ !~ /mark/ and $_ !~ /effect/ } keys %commands;
.Ve
.PP
}
.SH "NAME"
\&\fBAudio::Multitrack\fR \- Perl extensions for multitrack audio processing
.PP
\&\fBnama\fR \- multitrack recording/mixing application
.PP
Type 'man nama' for details on usage and licensing.
.PP
No further documentation is provided regarding
Audio::Multitrack and its subordinate modules.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 2069:" 4
.IX Item "Around line 2069:"
Unknown directive: =comment
.IP "Around line 4169:" 4
.IX Item "Around line 4169:"
Unknown directive: =comment
